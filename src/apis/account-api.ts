/* tslint:disable */
/* eslint-disable */
/**
 * Section API
 * Get edgey with the Section API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Account } from '../models';
import { AccountCreateRequest } from '../models';
import { AccountGraph } from '../models';
import { AccountUserUpdateParams } from '../models';
import { AccountUserUpdateResult } from '../models';
import { BillingHistory } from '../models';
import { BillingSummary } from '../models';
import { CreateAccountResponse } from '../models';
import { DomainList } from '../models';
import { ErrorModel } from '../models';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get basic billing information for account.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountBillingGet: async (accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountBillingGet.');
            }
            const localVarPath = `/account/{accountId}/billingsummary`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get billing history
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountBillingHistoryGet: async (accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountBillingHistoryGet.');
            }
            const localVarPath = `/account/{accountId}/billinghistory`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new account and application for the current user
         * @param {AccountCreateRequest} body Account create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCreate: async (body: AccountCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountCreate.');
            }
            const localVarPath = `/account/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of account's domains.
         * @param {number} accountId The account identifier number
         * @param {boolean} [engaged] The flag to return engaged or disengaged domains.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDomainList: async (accountId: number, engaged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountDomainList.');
            }
            const localVarPath = `/account/{accountId}/domains`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            if (engaged !== undefined) {
                localVarQueryParameter['engaged'] = engaged;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get basic information about an account.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGet: async (accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountGet.');
            }
            const localVarPath = `/account/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a graph of accounts/applications & environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGraph: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/graph`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Account User for permissions changes
         * @param {AccountUserUpdateParams} body Updates the accountCapability for a specific user within a specific account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserUpdate: async (body: AccountUserUpdateParams, accountId: number, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountUserUpdate.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountUserUpdate.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling accountUserUpdate.');
            }
            const localVarPath = `/account/{accountId}/user/{userId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get basic billing information for account.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountBillingGet(accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BillingSummary>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountBillingGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get billing history
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountBillingHistoryGet(accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BillingHistory>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountBillingHistoryGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new account and application for the current user
         * @param {AccountCreateRequest} body Account create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountCreate(body: AccountCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAccountResponse>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountCreate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of account's domains.
         * @param {number} accountId The account identifier number
         * @param {boolean} [engaged] The flag to return engaged or disengaged domains.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountDomainList(accountId: number, engaged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainList>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountDomainList(accountId, engaged, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get basic information about an account.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountGet(accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a graph of accounts/applications & environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountGraph(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountGraph>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountGraph(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update Account User for permissions changes
         * @param {AccountUserUpdateParams} body Updates the accountCapability for a specific user within a specific account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserUpdate(body: AccountUserUpdateParams, accountId: number, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountUserUpdateResult>> {
            const localVarAxiosArgs = await AccountApiAxiosParamCreator(configuration).accountUserUpdate(body, accountId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get basic billing information for account.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountBillingGet(accountId: number, options?: any): AxiosPromise<BillingSummary> {
            return AccountApiFp(configuration).accountBillingGet(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get billing history
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountBillingHistoryGet(accountId: number, options?: any): AxiosPromise<Array<BillingHistory>> {
            return AccountApiFp(configuration).accountBillingHistoryGet(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new account and application for the current user
         * @param {AccountCreateRequest} body Account create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCreate(body: AccountCreateRequest, options?: any): AxiosPromise<CreateAccountResponse> {
            return AccountApiFp(configuration).accountCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of account's domains.
         * @param {number} accountId The account identifier number
         * @param {boolean} [engaged] The flag to return engaged or disengaged domains.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDomainList(accountId: number, engaged?: boolean, options?: any): AxiosPromise<DomainList> {
            return AccountApiFp(configuration).accountDomainList(accountId, engaged, options).then((request) => request(axios, basePath));
        },
        /**
         * Get basic information about an account.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGet(accountId: number, options?: any): AxiosPromise<Account> {
            return AccountApiFp(configuration).accountGet(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a graph of accounts/applications & environments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGraph(options?: any): AxiosPromise<Array<AccountGraph>> {
            return AccountApiFp(configuration).accountGraph(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountList(options?: any): AxiosPromise<Array<Account>> {
            return AccountApiFp(configuration).accountList(options).then((request) => request(axios, basePath));
        },
        /**
         * Update Account User for permissions changes
         * @param {AccountUserUpdateParams} body Updates the accountCapability for a specific user within a specific account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserUpdate(body: AccountUserUpdateParams, accountId: number, userId: number, options?: any): AxiosPromise<AccountUserUpdateResult> {
            return AccountApiFp(configuration).accountUserUpdate(body, accountId, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * Get basic billing information for account.
     * @param {number} accountId The account identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountBillingGet(accountId: number, options?: any) {
        return AccountApiFp(this.configuration).accountBillingGet(accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get billing history
     * @param {number} accountId The account identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountBillingHistoryGet(accountId: number, options?: any) {
        return AccountApiFp(this.configuration).accountBillingHistoryGet(accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new account and application for the current user
     * @param {AccountCreateRequest} body Account create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountCreate(body: AccountCreateRequest, options?: any) {
        return AccountApiFp(this.configuration).accountCreate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of account's domains.
     * @param {number} accountId The account identifier number
     * @param {boolean} [engaged] The flag to return engaged or disengaged domains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountDomainList(accountId: number, engaged?: boolean, options?: any) {
        return AccountApiFp(this.configuration).accountDomainList(accountId, engaged, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get basic information about an account.
     * @param {number} accountId The account identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountGet(accountId: number, options?: any) {
        return AccountApiFp(this.configuration).accountGet(accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a graph of accounts/applications & environments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountGraph(options?: any) {
        return AccountApiFp(this.configuration).accountGraph(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountList(options?: any) {
        return AccountApiFp(this.configuration).accountList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Account User for permissions changes
     * @param {AccountUserUpdateParams} body Updates the accountCapability for a specific user within a specific account
     * @param {number} accountId The account identifier number
     * @param {number} userId The user identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountUserUpdate(body: AccountUserUpdateParams, accountId: number, userId: number, options?: any) {
        return AccountApiFp(this.configuration).accountUserUpdate(body, accountId, userId, options).then((request) => request(this.axios, this.basePath));
    }
}
