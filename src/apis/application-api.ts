/* tslint:disable */
/* eslint-disable */
/**
 * Section API
 * Get edgey with the Section API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountUser } from '../models';
import { Application } from '../models';
import { ApplicationCloneRequest } from '../models';
import { ApplicationCreateRequest } from '../models';
import { ApplicationSplitRequest } from '../models';
import { ApplicationStateUpdateRequest } from '../models';
import { ApplicationStateUpdateResult } from '../models';
import { ApplicationSummary } from '../models';
import { DomainEngaged } from '../models';
import { ErrorModel } from '../models';
import { Origin } from '../models';
import { ProxyTemplate } from '../models';
import { Stack } from '../models';
/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserGet: async (accountId: number, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountUserGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling accountUserGet.');
            }
            const localVarPath = `/account/{accountId}/user/{userId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserList: async (accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountUserList.');
            }
            const localVarPath = `/account/{accountId}/user`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Clone the configuration of an existing application into a new application.
         * @param {ApplicationCloneRequest} body Application Clone Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationClone: async (body: ApplicationCloneRequest, accountId: number, applicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling applicationClone.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling applicationClone.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling applicationClone.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/clone`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new application for the account
         * @param {ApplicationCreateRequest} body Application Create Payload
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationCreate: async (body: ApplicationCreateRequest, accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling applicationCreate.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling applicationCreate.');
            }
            const localVarPath = `/account/{accountId}/application/create`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationDelete: async (accountId: number, applicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling applicationDelete.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling applicationDelete.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get basic information about an application.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet: async (accountId: number, applicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling applicationGet.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling applicationGet.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the account's applications.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationList: async (accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling applicationList.');
            }
            const localVarPath = `/account/{accountId}/application/`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Split the url space of an existing application into a new application.
         * @param {ApplicationSplitRequest} body Application Split Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationSplit: async (body: ApplicationSplitRequest, accountId: number, applicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling applicationSplit.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling applicationSplit.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling applicationSplit.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/split`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Apply a cache ban to the default hosted environment for this application.  Deprecated, please use the proxy state method
         * @param {ApplicationStateUpdateRequest} body State update description
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationStatePost: async (body: ApplicationStateUpdateRequest, accountId: number, applicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling applicationStatePost.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling applicationStatePost.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling applicationStatePost.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/state`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks if any environment for this application is configured to route through Section
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationVerifyEngaged: async (accountId: number, applicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling applicationVerifyEngaged.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling applicationVerifyEngaged.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/verifyEngaged`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a tar.gz containing the inital state of the proxy repository
         * @param {string} proxyTemplateName Proxy template identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxyTemplateInitialState: async (proxyTemplateName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'proxyTemplateName' is not null or undefined
            if (proxyTemplateName === null || proxyTemplateName === undefined) {
                throw new RequiredError('proxyTemplateName','Required parameter proxyTemplateName was null or undefined when calling proxyTemplateInitialState.');
            }
            const localVarPath = `/proxytemplate/initialstate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            if (proxyTemplateName !== undefined) {
                localVarQueryParameter['proxyTemplateName'] = proxyTemplateName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of proxy templates that can be included in a proxy stack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxyTemplateList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/proxytemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets origin endpoint from hostname
         * @param {string} hostName Host Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveGet: async (hostName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hostName' is not null or undefined
            if (hostName === null || hostName === undefined) {
                throw new RequiredError('hostName','Required parameter hostName was null or undefined when calling resolveGet.');
            }
            const localVarPath = `/origin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            if (hostName !== undefined) {
                localVarQueryParameter['hostName'] = hostName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of stacks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stackList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/stack`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserGet(accountId: number, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountUser>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).accountUserGet(accountId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserList(accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountUser>>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).accountUserList(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Clone the configuration of an existing application into a new application.
         * @param {ApplicationCloneRequest} body Application Clone Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationClone(body: ApplicationCloneRequest, accountId: number, applicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationClone(body, accountId, applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new application for the account
         * @param {ApplicationCreateRequest} body Application Create Payload
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationCreate(body: ApplicationCreateRequest, accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationCreate(body, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationDelete(accountId: number, applicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationDelete(accountId, applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get basic information about an application.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationGet(accountId: number, applicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationGet(accountId, applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the account's applications.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationList(accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationSummary>>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationList(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Split the url space of an existing application into a new application.
         * @param {ApplicationSplitRequest} body Application Split Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationSplit(body: ApplicationSplitRequest, accountId: number, applicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationSplit(body, accountId, applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Apply a cache ban to the default hosted environment for this application.  Deprecated, please use the proxy state method
         * @param {ApplicationStateUpdateRequest} body State update description
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationStatePost(body: ApplicationStateUpdateRequest, accountId: number, applicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationStateUpdateResult>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationStatePost(body, accountId, applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Checks if any environment for this application is configured to route through Section
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationVerifyEngaged(accountId: number, applicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainEngaged>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).applicationVerifyEngaged(accountId, applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a tar.gz containing the inital state of the proxy repository
         * @param {string} proxyTemplateName Proxy template identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proxyTemplateInitialState(proxyTemplateName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).proxyTemplateInitialState(proxyTemplateName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of proxy templates that can be included in a proxy stack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proxyTemplateList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProxyTemplate>>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).proxyTemplateList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets origin endpoint from hostname
         * @param {string} hostName Host Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolveGet(hostName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Origin>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).resolveGet(hostName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of stacks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stackList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Stack>>> {
            const localVarAxiosArgs = await ApplicationApiAxiosParamCreator(configuration).stackList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserGet(accountId: number, userId: number, options?: any): AxiosPromise<AccountUser> {
            return ApplicationApiFp(configuration).accountUserGet(accountId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserList(accountId: number, options?: any): AxiosPromise<Array<AccountUser>> {
            return ApplicationApiFp(configuration).accountUserList(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Clone the configuration of an existing application into a new application.
         * @param {ApplicationCloneRequest} body Application Clone Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationClone(body: ApplicationCloneRequest, accountId: number, applicationId: number, options?: any): AxiosPromise<Application> {
            return ApplicationApiFp(configuration).applicationClone(body, accountId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new application for the account
         * @param {ApplicationCreateRequest} body Application Create Payload
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationCreate(body: ApplicationCreateRequest, accountId: number, options?: any): AxiosPromise<Application> {
            return ApplicationApiFp(configuration).applicationCreate(body, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationDelete(accountId: number, applicationId: number, options?: any): AxiosPromise<void> {
            return ApplicationApiFp(configuration).applicationDelete(accountId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get basic information about an application.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationGet(accountId: number, applicationId: number, options?: any): AxiosPromise<Application> {
            return ApplicationApiFp(configuration).applicationGet(accountId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the account's applications.
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationList(accountId: number, options?: any): AxiosPromise<Array<ApplicationSummary>> {
            return ApplicationApiFp(configuration).applicationList(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Split the url space of an existing application into a new application.
         * @param {ApplicationSplitRequest} body Application Split Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationSplit(body: ApplicationSplitRequest, accountId: number, applicationId: number, options?: any): AxiosPromise<Application> {
            return ApplicationApiFp(configuration).applicationSplit(body, accountId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Apply a cache ban to the default hosted environment for this application.  Deprecated, please use the proxy state method
         * @param {ApplicationStateUpdateRequest} body State update description
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationStatePost(body: ApplicationStateUpdateRequest, accountId: number, applicationId: number, options?: any): AxiosPromise<ApplicationStateUpdateResult> {
            return ApplicationApiFp(configuration).applicationStatePost(body, accountId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks if any environment for this application is configured to route through Section
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationVerifyEngaged(accountId: number, applicationId: number, options?: any): AxiosPromise<DomainEngaged> {
            return ApplicationApiFp(configuration).applicationVerifyEngaged(accountId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a tar.gz containing the inital state of the proxy repository
         * @param {string} proxyTemplateName Proxy template identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxyTemplateInitialState(proxyTemplateName: string, options?: any): AxiosPromise<string> {
            return ApplicationApiFp(configuration).proxyTemplateInitialState(proxyTemplateName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of proxy templates that can be included in a proxy stack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proxyTemplateList(options?: any): AxiosPromise<Array<ProxyTemplate>> {
            return ApplicationApiFp(configuration).proxyTemplateList(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets origin endpoint from hostname
         * @param {string} hostName Host Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveGet(hostName: string, options?: any): AxiosPromise<Origin> {
            return ApplicationApiFp(configuration).resolveGet(hostName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of stacks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stackList(options?: any): AxiosPromise<Array<Stack>> {
            return ApplicationApiFp(configuration).stackList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationApi - object-oriented interface
 * @export
 * @class ApplicationApi
 * @extends {BaseAPI}
 */
export class ApplicationApi extends BaseAPI {
    /**
     * Gets list of users with permissions to account
     * @param {number} accountId The account identifier number
     * @param {number} userId The user identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public accountUserGet(accountId: number, userId: number, options?: any) {
        return ApplicationApiFp(this.configuration).accountUserGet(accountId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets list of users with permissions to account
     * @param {number} accountId The account identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public accountUserList(accountId: number, options?: any) {
        return ApplicationApiFp(this.configuration).accountUserList(accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Clone the configuration of an existing application into a new application.
     * @param {ApplicationCloneRequest} body Application Clone Payload
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public applicationClone(body: ApplicationCloneRequest, accountId: number, applicationId: number, options?: any) {
        return ApplicationApiFp(this.configuration).applicationClone(body, accountId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new application for the account
     * @param {ApplicationCreateRequest} body Application Create Payload
     * @param {number} accountId The account identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public applicationCreate(body: ApplicationCreateRequest, accountId: number, options?: any) {
        return ApplicationApiFp(this.configuration).applicationCreate(body, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public applicationDelete(accountId: number, applicationId: number, options?: any) {
        return ApplicationApiFp(this.configuration).applicationDelete(accountId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get basic information about an application.
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public applicationGet(accountId: number, applicationId: number, options?: any) {
        return ApplicationApiFp(this.configuration).applicationGet(accountId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the account's applications.
     * @param {number} accountId The account identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public applicationList(accountId: number, options?: any) {
        return ApplicationApiFp(this.configuration).applicationList(accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Split the url space of an existing application into a new application.
     * @param {ApplicationSplitRequest} body Application Split Payload
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public applicationSplit(body: ApplicationSplitRequest, accountId: number, applicationId: number, options?: any) {
        return ApplicationApiFp(this.configuration).applicationSplit(body, accountId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Apply a cache ban to the default hosted environment for this application.  Deprecated, please use the proxy state method
     * @param {ApplicationStateUpdateRequest} body State update description
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public applicationStatePost(body: ApplicationStateUpdateRequest, accountId: number, applicationId: number, options?: any) {
        return ApplicationApiFp(this.configuration).applicationStatePost(body, accountId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Checks if any environment for this application is configured to route through Section
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public applicationVerifyEngaged(accountId: number, applicationId: number, options?: any) {
        return ApplicationApiFp(this.configuration).applicationVerifyEngaged(accountId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a tar.gz containing the inital state of the proxy repository
     * @param {string} proxyTemplateName Proxy template identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public proxyTemplateInitialState(proxyTemplateName: string, options?: any) {
        return ApplicationApiFp(this.configuration).proxyTemplateInitialState(proxyTemplateName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an array of proxy templates that can be included in a proxy stack
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public proxyTemplateList(options?: any) {
        return ApplicationApiFp(this.configuration).proxyTemplateList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets origin endpoint from hostname
     * @param {string} hostName Host Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public resolveGet(hostName: string, options?: any) {
        return ApplicationApiFp(this.configuration).resolveGet(hostName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an array of stacks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public stackList(options?: any) {
        return ApplicationApiFp(this.configuration).stackList(options).then((request) => request(this.axios, this.basePath));
    }
}
