/* tslint:disable */
/* eslint-disable */
/**
 * Section API
 * Get edgey with the Section API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AccountUser } from '../models';
import { AccountUserActionResult } from '../models';
import { AccountUserInviteRequest } from '../models';
import { AccountUserUpdateParams } from '../models';
import { AccountUserUpdateResult } from '../models';
import { ErrorModel } from '../models';
import { Totp } from '../models';
import { User } from '../models';
import { UserResendVerificationResult } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserGet: async (accountId: number, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountUserGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling accountUserGet.');
            }
            const localVarPath = `/account/{accountId}/user/{userId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite user to account
         * @param {AccountUserInviteRequest} body Invite user to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserInvitePost: async (body: AccountUserInviteRequest, accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountUserInvitePost.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountUserInvitePost.');
            }
            const localVarPath = `/account/{accountId}/user`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserList: async (accountId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountUserList.');
            }
            const localVarPath = `/account/{accountId}/user`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite user to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserRemove: async (accountId: number, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountUserRemove.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling accountUserRemove.');
            }
            const localVarPath = `/account/{accountId}/user/{userId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Account User for permissions changes
         * @param {AccountUserUpdateParams} body Updates the accountCapability for a specific user within a specific account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserUpdate: async (body: AccountUserUpdateParams, accountId: number, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling accountUserUpdate.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling accountUserUpdate.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling accountUserUpdate.');
            }
            const localVarPath = `/account/{accountId}/user/{userId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current user details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update current user details
         * @param {User} body User details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPost: async (body: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling currentUserPost.');
            }
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate and return a new 2FA (TOTP) token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserTotpPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/totp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend email verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserVerificationPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/resendverification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserGet(accountId: number, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountUser>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).accountUserGet(accountId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invite user to account
         * @param {AccountUserInviteRequest} body Invite user to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserInvitePost(body: AccountUserInviteRequest, accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountUserActionResult>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).accountUserInvitePost(body, accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserList(accountId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountUser>>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).accountUserList(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invite user to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserRemove(accountId: number, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountUserActionResult>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).accountUserRemove(accountId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update Account User for permissions changes
         * @param {AccountUserUpdateParams} body Updates the accountCapability for a specific user within a specific account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountUserUpdate(body: AccountUserUpdateParams, accountId: number, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountUserUpdateResult>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).accountUserUpdate(body, accountId, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get current user details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).currentUserGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update current user details
         * @param {User} body User details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserPost(body: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).currentUserPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generate and return a new 2FA (TOTP) token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserTotpPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Totp>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).currentUserTotpPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Resend email verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUserVerificationPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResendVerificationResult>> {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).currentUserVerificationPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserGet(accountId: number, userId: number, options?: any): AxiosPromise<AccountUser> {
            return UserApiFp(configuration).accountUserGet(accountId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite user to account
         * @param {AccountUserInviteRequest} body Invite user to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserInvitePost(body: AccountUserInviteRequest, accountId: number, options?: any): AxiosPromise<AccountUserActionResult> {
            return UserApiFp(configuration).accountUserInvitePost(body, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets list of users with permissions to account
         * @param {number} accountId The account identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserList(accountId: number, options?: any): AxiosPromise<Array<AccountUser>> {
            return UserApiFp(configuration).accountUserList(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite user to account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserRemove(accountId: number, userId: number, options?: any): AxiosPromise<AccountUserActionResult> {
            return UserApiFp(configuration).accountUserRemove(accountId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Account User for permissions changes
         * @param {AccountUserUpdateParams} body Updates the accountCapability for a specific user within a specific account
         * @param {number} accountId The account identifier number
         * @param {number} userId The user identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountUserUpdate(body: AccountUserUpdateParams, accountId: number, userId: number, options?: any): AxiosPromise<AccountUserUpdateResult> {
            return UserApiFp(configuration).accountUserUpdate(body, accountId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current user details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserGet(options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).currentUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update current user details
         * @param {User} body User details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserPost(body: User, options?: any): AxiosPromise<User> {
            return UserApiFp(configuration).currentUserPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate and return a new 2FA (TOTP) token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserTotpPost(options?: any): AxiosPromise<Totp> {
            return UserApiFp(configuration).currentUserTotpPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Resend email verification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUserVerificationPost(options?: any): AxiosPromise<UserResendVerificationResult> {
            return UserApiFp(configuration).currentUserVerificationPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Gets list of users with permissions to account
     * @param {number} accountId The account identifier number
     * @param {number} userId The user identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public accountUserGet(accountId: number, userId: number, options?: any) {
        return UserApiFp(this.configuration).accountUserGet(accountId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Invite user to account
     * @param {AccountUserInviteRequest} body Invite user to account
     * @param {number} accountId The account identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public accountUserInvitePost(body: AccountUserInviteRequest, accountId: number, options?: any) {
        return UserApiFp(this.configuration).accountUserInvitePost(body, accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets list of users with permissions to account
     * @param {number} accountId The account identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public accountUserList(accountId: number, options?: any) {
        return UserApiFp(this.configuration).accountUserList(accountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Invite user to account
     * @param {number} accountId The account identifier number
     * @param {number} userId The user identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public accountUserRemove(accountId: number, userId: number, options?: any) {
        return UserApiFp(this.configuration).accountUserRemove(accountId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update Account User for permissions changes
     * @param {AccountUserUpdateParams} body Updates the accountCapability for a specific user within a specific account
     * @param {number} accountId The account identifier number
     * @param {number} userId The user identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public accountUserUpdate(body: AccountUserUpdateParams, accountId: number, userId: number, options?: any) {
        return UserApiFp(this.configuration).accountUserUpdate(body, accountId, userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get current user details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public currentUserGet(options?: any) {
        return UserApiFp(this.configuration).currentUserGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update current user details
     * @param {User} body User details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public currentUserPost(body: User, options?: any) {
        return UserApiFp(this.configuration).currentUserPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Generate and return a new 2FA (TOTP) token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public currentUserTotpPost(options?: any) {
        return UserApiFp(this.configuration).currentUserTotpPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Resend email verification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public currentUserVerificationPost(options?: any) {
        return UserApiFp(this.configuration).currentUserVerificationPost(options).then((request) => request(this.axios, this.basePath));
    }
}
