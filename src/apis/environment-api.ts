/* tslint:disable */
/* eslint-disable */
/**
 * Section API
 * Get edgey with the Section API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Body2 } from '../models';
import { Body3 } from '../models';
import { Egress } from '../models';
import { EnvironmentConfiguration } from '../models';
import { EnvironmentCreateRequest } from '../models';
import { EnvironmentEngaged } from '../models';
import { EnvironmentSummary } from '../models';
import { ErrorModel } from '../models';
import { IpRestrictions } from '../models';
import { Proxy } from '../models';
import { RFC6902Operation } from '../models';
import { ZoneSummary } from '../models';
/**
 * EnvironmentApi - axios parameter creator
 * @export
 */
export const EnvironmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the environment's egress configuration.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        egressGet: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling egressGet.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling egressGet.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling egressGet.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/egress`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the environment's egress configuration.
         * @param {Egress} body Environment Egress Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        egressPost: async (body: Egress, accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling egressPost.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling egressPost.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling egressPost.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling egressPost.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/egress`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Section Hosted DNS for the environment's domain
         * @param {Body3} body 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableHostedDNS: async (body: Body3, accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling enableHostedDNS.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling enableHostedDNS.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling enableHostedDNS.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling enableHostedDNS.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/enableHostedDNS`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a domain to an environment. If there is no certificate passed in the body, a Let's Encrypt certificate will be generated for this domain
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {string} hostName Host Name
         * @param {Body2} [body] Certificate payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentAddDomain: async (accountId: number, applicationId: number, environmentName: string, hostName: string, body?: Body2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentAddDomain.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentAddDomain.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentAddDomain.');
            }
            // verify required parameter 'hostName' is not null or undefined
            if (hostName === null || hostName === undefined) {
                throw new RequiredError('hostName','Required parameter hostName was null or undefined when calling environmentAddDomain.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/domain/{hostName}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)))
                .replace(`{${"hostName"}}`, encodeURIComponent(String(hostName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an application environment.
         * @param {EnvironmentCreateRequest} body Environment Create Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentCreate: async (body: EnvironmentCreateRequest, accountId: number, applicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling environmentCreate.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentCreate.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentCreate.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/create`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the bypass of Section for this environment. All traffic will be directed to Section's servers.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentDnsBypassDelete: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentDnsBypassDelete.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentDnsBypassDelete.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentDnsBypassDelete.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/dnsbypass`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Request the bypassing of Section for this environment. All traffic will be directed to the environment's origin address.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentDnsBypassPost: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentDnsBypassPost.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentDnsBypassPost.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentDnsBypassPost.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/dnsbypass`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the last known state of whether this environment is configured to route through Section without re-checking.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentFetchEngaged: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentFetchEngaged.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentFetchEngaged.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentFetchEngaged.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/engaged`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the environment.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentGet: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentGet.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentGet.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentGet.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of IP addresses and CIDR blocks that are restricted from accessing this environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentIpRestrictionsGet: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentIpRestrictionsGet.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentIpRestrictionsGet.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentIpRestrictionsGet.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/ipRestrictions`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the list of IP addresses and CIDR blocks that are restricted from accessing this environment
         * @param {IpRestrictions} body IP restrictions list
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentIpRestrictionsPost: async (body: IpRestrictions, accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling environmentIpRestrictionsPost.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentIpRestrictionsPost.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentIpRestrictionsPost.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentIpRestrictionsPost.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/ipRestrictions`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the application's environments.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentList: async (accountId: number, applicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentList.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentList.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a domain from an environment. Will also remove any certificate linked to the domain
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {string} hostName Host Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentRemoveDomain: async (accountId: number, applicationId: number, environmentName: string, hostName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentRemoveDomain.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentRemoveDomain.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentRemoveDomain.');
            }
            // verify required parameter 'hostName' is not null or undefined
            if (hostName === null || hostName === undefined) {
                throw new RequiredError('hostName','Required parameter hostName was null or undefined when calling environmentRemoveDomain.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/domain/{hostName}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)))
                .replace(`{${"hostName"}}`, encodeURIComponent(String(hostName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the proxy stack list for an environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentStackGet: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentStackGet.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentStackGet.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentStackGet.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/stack`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks if this environment is configured to route through Section
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentVerifyEngaged: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling environmentVerifyEngaged.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling environmentVerifyEngaged.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling environmentVerifyEngaged.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/verifyEngaged`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get configuration for the environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: async (accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getConfiguration.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling getConfiguration.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling getConfiguration.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/configuration`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch configuration for the environment
         * @param {Array&lt;RFC6902Operation&gt;} body 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConfiguration: async (body: Array<RFC6902Operation>, accountId: number, applicationId: number, environmentName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling patchConfiguration.');
            }
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling patchConfiguration.');
            }
            // verify required parameter 'applicationId' is not null or undefined
            if (applicationId === null || applicationId === undefined) {
                throw new RequiredError('applicationId','Required parameter applicationId was null or undefined when calling patchConfiguration.');
            }
            // verify required parameter 'environmentName' is not null or undefined
            if (environmentName === null || environmentName === undefined) {
                throw new RequiredError('environmentName','Required parameter environmentName was null or undefined when calling patchConfiguration.');
            }
            const localVarPath = `/account/{accountId}/application/{applicationId}/environment/{environmentName}/configuration`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId)))
                .replace(`{${"environmentName"}}`, encodeURIComponent(String(environmentName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required

            // authentication keyInQuery required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("access_token")
                    : await configuration.apiKey;
                localVarQueryParameter["access_token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentApi - functional programming interface
 * @export
 */
export const EnvironmentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the environment's egress configuration.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async egressGet(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Egress>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).egressGet(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the environment's egress configuration.
         * @param {Egress} body Environment Egress Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async egressPost(body: Egress, accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Egress>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).egressPost(body, accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable Section Hosted DNS for the environment's domain
         * @param {Body3} body 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableHostedDNS(body: Body3, accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZoneSummary>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).enableHostedDNS(body, accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a domain to an environment. If there is no certificate passed in the body, a Let's Encrypt certificate will be generated for this domain
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {string} hostName Host Name
         * @param {Body2} [body] Certificate payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentAddDomain(accountId: number, applicationId: number, environmentName: string, hostName: string, body?: Body2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentSummary>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentAddDomain(accountId, applicationId, environmentName, hostName, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create an application environment.
         * @param {EnvironmentCreateRequest} body Environment Create Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentCreate(body: EnvironmentCreateRequest, accountId: number, applicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentSummary>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentCreate(body, accountId, applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove the bypass of Section for this environment. All traffic will be directed to Section's servers.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentDnsBypassDelete(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentDnsBypassDelete(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Request the bypassing of Section for this environment. All traffic will be directed to the environment's origin address.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentDnsBypassPost(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentDnsBypassPost(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the last known state of whether this environment is configured to route through Section without re-checking.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentFetchEngaged(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentEngaged>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentFetchEngaged(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the environment.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentGet(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentSummary>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentGet(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the list of IP addresses and CIDR blocks that are restricted from accessing this environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentIpRestrictionsGet(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpRestrictions>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentIpRestrictionsGet(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update the list of IP addresses and CIDR blocks that are restricted from accessing this environment
         * @param {IpRestrictions} body IP restrictions list
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentIpRestrictionsPost(body: IpRestrictions, accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpRestrictions>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentIpRestrictionsPost(body, accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the application's environments.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentList(accountId: number, applicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnvironmentSummary>>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentList(accountId, applicationId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a domain from an environment. Will also remove any certificate linked to the domain
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {string} hostName Host Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentRemoveDomain(accountId: number, applicationId: number, environmentName: string, hostName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentSummary>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentRemoveDomain(accountId, applicationId, environmentName, hostName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the proxy stack list for an environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentStackGet(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Proxy>>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentStackGet(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Checks if this environment is configured to route through Section
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentVerifyEngaged(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentEngaged>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).environmentVerifyEngaged(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get configuration for the environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfiguration(accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentConfiguration>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).getConfiguration(accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Patch configuration for the environment
         * @param {Array&lt;RFC6902Operation&gt;} body 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchConfiguration(body: Array<RFC6902Operation>, accountId: number, applicationId: number, environmentName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentConfiguration>> {
            const localVarAxiosArgs = await EnvironmentApiAxiosParamCreator(configuration).patchConfiguration(body, accountId, applicationId, environmentName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnvironmentApi - factory interface
 * @export
 */
export const EnvironmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the environment's egress configuration.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        egressGet(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<Egress> {
            return EnvironmentApiFp(configuration).egressGet(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the environment's egress configuration.
         * @param {Egress} body Environment Egress Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        egressPost(body: Egress, accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<Egress> {
            return EnvironmentApiFp(configuration).egressPost(body, accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Section Hosted DNS for the environment's domain
         * @param {Body3} body 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableHostedDNS(body: Body3, accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<ZoneSummary> {
            return EnvironmentApiFp(configuration).enableHostedDNS(body, accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a domain to an environment. If there is no certificate passed in the body, a Let's Encrypt certificate will be generated for this domain
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {string} hostName Host Name
         * @param {Body2} [body] Certificate payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentAddDomain(accountId: number, applicationId: number, environmentName: string, hostName: string, body?: Body2, options?: any): AxiosPromise<EnvironmentSummary> {
            return EnvironmentApiFp(configuration).environmentAddDomain(accountId, applicationId, environmentName, hostName, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an application environment.
         * @param {EnvironmentCreateRequest} body Environment Create Payload
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentCreate(body: EnvironmentCreateRequest, accountId: number, applicationId: number, options?: any): AxiosPromise<EnvironmentSummary> {
            return EnvironmentApiFp(configuration).environmentCreate(body, accountId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the bypass of Section for this environment. All traffic will be directed to Section's servers.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentDnsBypassDelete(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<void> {
            return EnvironmentApiFp(configuration).environmentDnsBypassDelete(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Request the bypassing of Section for this environment. All traffic will be directed to the environment's origin address.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentDnsBypassPost(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<void> {
            return EnvironmentApiFp(configuration).environmentDnsBypassPost(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the last known state of whether this environment is configured to route through Section without re-checking.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentFetchEngaged(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<EnvironmentEngaged> {
            return EnvironmentApiFp(configuration).environmentFetchEngaged(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the environment.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentGet(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<EnvironmentSummary> {
            return EnvironmentApiFp(configuration).environmentGet(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of IP addresses and CIDR blocks that are restricted from accessing this environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentIpRestrictionsGet(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<IpRestrictions> {
            return EnvironmentApiFp(configuration).environmentIpRestrictionsGet(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the list of IP addresses and CIDR blocks that are restricted from accessing this environment
         * @param {IpRestrictions} body IP restrictions list
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentIpRestrictionsPost(body: IpRestrictions, accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<IpRestrictions> {
            return EnvironmentApiFp(configuration).environmentIpRestrictionsPost(body, accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the application's environments.
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentList(accountId: number, applicationId: number, options?: any): AxiosPromise<Array<EnvironmentSummary>> {
            return EnvironmentApiFp(configuration).environmentList(accountId, applicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a domain from an environment. Will also remove any certificate linked to the domain
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {string} hostName Host Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentRemoveDomain(accountId: number, applicationId: number, environmentName: string, hostName: string, options?: any): AxiosPromise<EnvironmentSummary> {
            return EnvironmentApiFp(configuration).environmentRemoveDomain(accountId, applicationId, environmentName, hostName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the proxy stack list for an environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentStackGet(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<Array<Proxy>> {
            return EnvironmentApiFp(configuration).environmentStackGet(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks if this environment is configured to route through Section
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentVerifyEngaged(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<EnvironmentEngaged> {
            return EnvironmentApiFp(configuration).environmentVerifyEngaged(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Get configuration for the environment
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration(accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<EnvironmentConfiguration> {
            return EnvironmentApiFp(configuration).getConfiguration(accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch configuration for the environment
         * @param {Array&lt;RFC6902Operation&gt;} body 
         * @param {number} accountId The account identifier number
         * @param {number} applicationId The application identifier number
         * @param {string} environmentName The name of the environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchConfiguration(body: Array<RFC6902Operation>, accountId: number, applicationId: number, environmentName: string, options?: any): AxiosPromise<EnvironmentConfiguration> {
            return EnvironmentApiFp(configuration).patchConfiguration(body, accountId, applicationId, environmentName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvironmentApi - object-oriented interface
 * @export
 * @class EnvironmentApi
 * @extends {BaseAPI}
 */
export class EnvironmentApi extends BaseAPI {
    /**
     * Get the environment's egress configuration.
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public egressGet(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).egressGet(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the environment's egress configuration.
     * @param {Egress} body Environment Egress Payload
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public egressPost(body: Egress, accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).egressPost(body, accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable Section Hosted DNS for the environment's domain
     * @param {Body3} body 
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public enableHostedDNS(body: Body3, accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).enableHostedDNS(body, accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a domain to an environment. If there is no certificate passed in the body, a Let's Encrypt certificate will be generated for this domain
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {string} hostName Host Name
     * @param {Body2} [body] Certificate payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentAddDomain(accountId: number, applicationId: number, environmentName: string, hostName: string, body?: Body2, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentAddDomain(accountId, applicationId, environmentName, hostName, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create an application environment.
     * @param {EnvironmentCreateRequest} body Environment Create Payload
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentCreate(body: EnvironmentCreateRequest, accountId: number, applicationId: number, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentCreate(body, accountId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove the bypass of Section for this environment. All traffic will be directed to Section's servers.
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentDnsBypassDelete(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentDnsBypassDelete(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Request the bypassing of Section for this environment. All traffic will be directed to the environment's origin address.
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentDnsBypassPost(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentDnsBypassPost(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the last known state of whether this environment is configured to route through Section without re-checking.
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentFetchEngaged(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentFetchEngaged(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the environment.
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentGet(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentGet(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the list of IP addresses and CIDR blocks that are restricted from accessing this environment
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentIpRestrictionsGet(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentIpRestrictionsGet(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the list of IP addresses and CIDR blocks that are restricted from accessing this environment
     * @param {IpRestrictions} body IP restrictions list
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentIpRestrictionsPost(body: IpRestrictions, accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentIpRestrictionsPost(body, accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the application's environments.
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentList(accountId: number, applicationId: number, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentList(accountId, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove a domain from an environment. Will also remove any certificate linked to the domain
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {string} hostName Host Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentRemoveDomain(accountId: number, applicationId: number, environmentName: string, hostName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentRemoveDomain(accountId, applicationId, environmentName, hostName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the proxy stack list for an environment
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentStackGet(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentStackGet(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Checks if this environment is configured to route through Section
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public environmentVerifyEngaged(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).environmentVerifyEngaged(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get configuration for the environment
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public getConfiguration(accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).getConfiguration(accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Patch configuration for the environment
     * @param {Array&lt;RFC6902Operation&gt;} body 
     * @param {number} accountId The account identifier number
     * @param {number} applicationId The application identifier number
     * @param {string} environmentName The name of the environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    public patchConfiguration(body: Array<RFC6902Operation>, accountId: number, applicationId: number, environmentName: string, options?: any) {
        return EnvironmentApiFp(this.configuration).patchConfiguration(body, accountId, applicationId, environmentName, options).then((request) => request(this.axios, this.basePath));
    }
}
